<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | Christopher Johnstone</title><link>https://www.meson.us/post/</link><atom:link href="https://www.meson.us/post/index.xml" rel="self" type="application/rss+xml"/><description>Posts</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Christopher Johnstone 2021</copyright><image><url>https://www.meson.us/images/icon_huefc63cfe39aad05e124de0ee3c9c0c65_185599_512x512_fill_lanczos_center_2.png</url><title>Posts</title><link>https://www.meson.us/post/</link></image><item><title>Running Alphafold Without Docker</title><link>https://www.meson.us/post/alphafold-without-docker/</link><pubDate>Fri, 06 Aug 2021 11:56:08 -0400</pubDate><guid>https://www.meson.us/post/alphafold-without-docker/</guid><description>&lt;p>With the release of &lt;a href="https://github.com/deepmind/alphafold" target="_blank" rel="noopener">Alphafold 2&lt;/a>, we have an alterate way to predict structure that is much faster than similar tools, such as Rosetta. Alphafold 2 also crushed CASP14, the main protein prediction competition, having the lowest RMS atom position error in many categories.&lt;/p>
&lt;p>However, by default, Alphafold uses a Docker container to run. This is great if you own your own cluster, but many shared clusters do not have Docker (for good reason; having Docker access is effectively having root access, even with a lot of laborious hardening work).
By reading the &lt;a href="https://github.com/deepmind/alphafold/blob/main/run_alphafold.py" target="_blank" rel="noopener">run_alphafold.py&lt;/a>, &lt;a href="https://github.com/deepmind/alphafold/blob/main/docker/run_docker.py" target="_blank" rel="noopener">run_docker.py&lt;/a>, and &lt;a href="https://github.com/deepmind/alphafold/blob/main/docker/Dockerfile" target="_blank" rel="noopener">Dockerfile&lt;/a> used in Alphafold, we can backtrack
the commands needed to setup a local install.&lt;/p>
&lt;h2>Table of Contents&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="#installing-cuda">Installing CUDA.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#target-directory-layout">Target directory layout&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clone-the-alphafold-repository-and-download-parameters">Clone the Alphafold repository and download parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#compile-and-install-dependencies-aria2c-hmmer-kalign-and-hhsuite">Compile and install dependencies: aria2c, HMMER, kalign, and HHsuite&lt;/a>&lt;/li>
&lt;li>&lt;a href="#download-the-dataset-and-squashfsing">Download the dataset and squashfs&amp;rsquo;ing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-the-necessary-conda-environment-and-patch-openmm">Create the necessary conda environment and patch OpenMM&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wrap-the-run-script">Wrap the run script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-alphafold">Running Alphafold!&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h3 id="installing-cuda">Installing CUDA.&lt;/h3>
&lt;p>As seen at the top of the Dockerfile:&lt;/p>
&lt;pre>&lt;code>ARG CUDA=11.0
FROM nvidia/cuda:${CUDA}-cudnn8-runtime-ubuntu18.04
# FROM directive resets ARGS, so we specify again (the value is retained if
# previously set).
ARG CUDA
&lt;/code>&lt;/pre>
&lt;p>Alphafold expects that the CUDA version used is hard-coded to &lt;code>11.0&lt;/code>. Installing CUDA drivers is outside of the scope of this post; if you are running on a cluster, you may have multiple different CUDA versions available.
Loading a CUDA version later than 11.0 will likely result in a &amp;ldquo;drivers out of date&amp;rdquo; error.&lt;/p>
&lt;h3 id="target-directory-layout">Target directory layout&lt;/h3>
&lt;p>Pick a directory to install all of the relevant Alphafold content into. If you are downloading the full dataset, be warned; unpacked, the dataset takes around 2.3TiB of space! The size of all other files is relatively small.&lt;/p>
&lt;pre>&lt;code class="language-shell">$ mkdir alphafold_install
$ cd alphafold_install
&lt;/code>&lt;/pre>
&lt;p>The final directory layout will look like this (many files removed for brevity):&lt;/p>
&lt;pre>&lt;code>├───alphafold
│ ├───alphafold
│ │ └───common
│ │ ├───stereo_chemical_props.txt
│ │ ├───stereo_chemical_props.txt.1
│ │ └───stereo_chemical_props.txt.2
│ ├───docker
│ │ └───openmm.patch
│ ├───run_alphafold.py
│ └───scripts
│ └───download_all_data.sh
├───alphafold_env
├───bin
│ ├───(others)
│ ├───alphafold
│ ├───aria2c
│ ├───hhalign
│ ├───hhblits
│ └───kalign
├───dataset
│ ├───archives
│ ├───bfd
│ ├───mgnify
│ ├───params
│ ├───pdb70
│ ├───pdb_mmcif
│ ├───small_bfd
│ ├───uniclust30
│ └───uniref90
├───deps
│ ├───install
│ ├───hh-suite
│ ├───hmmer-3.3.2
│ └───kalign-3.3.1
└───setup_scripts
├───create_env.sh
└───env.yml
&lt;/code>&lt;/pre>
&lt;h3 id="clone-the-alphafold-repository-and-download-parameters">Clone the Alphafold repository and download parameters&lt;/h3>
&lt;p>To get started, clone the Github repository and switch into it:&lt;/p>
&lt;pre>&lt;code class="language-shell">$ git clone https://github.com/deepmind/alphafold.git
Cloning into 'alphafold'...
remote: Enumerating objects: 233, done.
remote: Counting objects: 100% (123/123), done.
remote: Compressing objects: 100% (75/75), done.
remote: Total 233 (delta 52), reused 72 (delta 47), pack-reused 110
Receiving objects: 100% (233/233), 5.68 MiB | 42.76 MiB/s, done.
Resolving deltas: 100% (89/89), done.
Checking out files: 100% (89/89), done.
$ cd alphafold
&lt;/code>&lt;/pre>
&lt;h3 id="compile-and-install-dependencies-aria2c-hmmer-kalign-and-hhsuite">Compile and install dependencies: aria2c, HMMER, kalign, and HHsuite&lt;/h3>
&lt;h3 id="download-the-dataset-and-squashfsing">Download the dataset and squashfs&amp;rsquo;ing&lt;/h3>
&lt;h3 id="create-the-necessary-conda-environment-and-patch-openmm">Create the necessary conda environment and patch OpenMM&lt;/h3>
&lt;h3 id="wrap-the-run-script">Wrap the run script&lt;/h3>
&lt;h3 id="running-alphafold">Running Alphafold!&lt;/h3></description></item></channel></rss>