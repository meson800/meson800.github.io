[{"authors":null,"categories":null,"content":"I\u0026rsquo;m a PhD student at MIT working in the Galloway Lab. Out of all of the systems that chemical engineers examine, I\u0026rsquo;ve found that biological systems are the most fascinating, complex, and challenging systems we could possibly dream of working with.\nI\u0026rsquo;ve also always enjoyed coding. My favorite language was and still is C++; I\u0026rsquo;ve written several toy projects and contributed to several open-source development efforts with C++. I also enjoy Python, and use it pretty frequently as my go-to \u0026ldquo;glue\u0026rdquo;, data-analysis, or prototyping language.\nWhen I\u0026rsquo;m not doing research or programming, I like to dabble: 3D modeling and animation, video editing, sailing, quadcopter construction, rocket building have all been recent interests of mine.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1604084310,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.meson.us/author/christopher-johnstone/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/christopher-johnstone/","section":"authors","summary":"I\u0026rsquo;m a PhD student at MIT working in the Galloway Lab. Out of all of the systems that chemical engineers examine, I\u0026rsquo;ve found that biological systems are the most fascinating, complex, and challenging systems we could possibly dream of working with.","tags":null,"title":"Christopher Johnstone","type":"authors"},{"authors":[],"categories":[],"content":"With the release of Alphafold 2, we have an alterate way to predict structure that is much faster than similar tools, such as Rosetta. Alphafold 2 also crushed CASP14, the main protein prediction competition, having the lowest RMS atom position error in many categories.\nHowever, by default, Alphafold uses a Docker container to run. This is great if you own your own cluster, but many shared clusters do not have Docker (for good reason; having Docker access is effectively having root access, even with a lot of laborious hardening work). By reading the run_alphafold.py, run_docker.py, and Dockerfile used in Alphafold, we can backtrack the commands needed to setup a local install.\nTable of Contents    Installing CUDA. Target directory layout Clone the Alphafold repository and download parameters Compile and install dependencies: aria2c, HMMER, kalign, and HHsuite Download the dataset and squashfs\u0026rsquo;ing Create the necessary conda environment and patch OpenMM Wrap the run script Running Alphafold!     Installing CUDA. As seen at the top of the Dockerfile:\nARG CUDA=11.0 FROM nvidia/cuda:${CUDA}-cudnn8-runtime-ubuntu18.04 # FROM directive resets ARGS, so we specify again (the value is retained if # previously set). ARG CUDA  Alphafold expects that the CUDA version used is hard-coded to 11.0. Installing CUDA drivers is outside of the scope of this post; if you are running on a cluster, you may have multiple different CUDA versions available. Loading a CUDA version later than 11.0 will likely result in a \u0026ldquo;drivers out of date\u0026rdquo; error.\nTarget directory layout Pick a directory to install all of the relevant Alphafold content into. If you are downloading the full dataset, be warned; unpacked, the dataset takes around 2.3TiB of space! The size of all other files is relatively small.\n$ mkdir alphafold_install $ cd alphafold_install  The final directory layout will look like this (many files removed for brevity):\n├───alphafold │ ├───alphafold │ │ └───common │ │ ├───stereo_chemical_props.txt │ │ ├───stereo_chemical_props.txt.1 │ │ └───stereo_chemical_props.txt.2 │ ├───docker │ │ └───openmm.patch │ ├───run_alphafold.py │ └───scripts │ └───download_all_data.sh ├───alphafold_env ├───bin │ ├───(others) │ ├───alphafold │ ├───aria2c │ ├───hhalign │ ├───hhblits │ └───kalign ├───dataset │ ├───archives │ ├───bfd │ ├───mgnify │ ├───params │ ├───pdb70 │ ├───pdb_mmcif │ ├───small_bfd │ ├───uniclust30 │ └───uniref90 ├───deps │ ├───install │ ├───hh-suite │ ├───hmmer-3.3.2 │ └───kalign-3.3.1 └───setup_scripts ├───create_env.sh └───env.yml  Clone the Alphafold repository and download parameters To get started, clone the Github repository and switch into it:\n$ git clone https://github.com/deepmind/alphafold.git Cloning into 'alphafold'... remote: Enumerating objects: 233, done. remote: Counting objects: 100% (123/123), done. remote: Compressing objects: 100% (75/75), done. remote: Total 233 (delta 52), reused 72 (delta 47), pack-reused 110 Receiving objects: 100% (233/233), 5.68 MiB | 42.76 MiB/s, done. Resolving deltas: 100% (89/89), done. Checking out files: 100% (89/89), done. $ cd alphafold  Compile and install dependencies: aria2c, HMMER, kalign, and HHsuite Download the dataset and squashfs\u0026rsquo;ing Create the necessary conda environment and patch OpenMM Wrap the run script Running Alphafold! ","date":1628265368,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628282498,"objectID":"fb5a6e4ac9253bb276457dde9f79b3db","permalink":"https://www.meson.us/post/alphafold-without-docker/","publishdate":"2021-08-06T11:56:08-04:00","relpermalink":"/post/alphafold-without-docker/","section":"post","summary":"A brief tutorial on installing all relevant Alphafold dependencies is presented","tags":[],"title":"Running Alphafold Without Docker","type":"post"},{"authors":[],"categories":[],"content":"To convert the EXRs into a movie file, we use the following ffmpeg command:\nffmpeg -f lavfi -i color=c=white:s=1920x1080 -r 60 -apply_trc iec61966_2_1 -i output/%04d.exr -filter_complex \u0026quot;[0:v][1:v]overlay=shortest=1\u0026quot; -vcodec libx264 -pix_fmt yuv420p -preset slow -crf 18 -r 60 output_filename.mp4  To run the headless Blender render, we use:\npath_to_blender/blender -b -y polymerase_movie_baked.blend -a  ","date":1618327111,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628282498,"objectID":"c50809ebd4b486b188794a2c5f934956","permalink":"https://www.meson.us/project/rnap-animations/","publishdate":"2021-04-13T11:18:31-04:00","relpermalink":"/project/rnap-animations/","section":"project","summary":"To convert the EXRs into a movie file, we use the following ffmpeg command:\nffmpeg -f lavfi -i color=c=white:s=1920x1080 -r 60 -apply_trc iec61966_2_1 -i output/%04d.exr -filter_complex \u0026quot;[0:v][1:v]overlay=shortest=1\u0026quot; -vcodec libx264 -pix_fmt yuv420p -preset slow -crf 18 -r 60 output_filename.","tags":[],"title":"RNA Polymerase Animations","type":"project"},{"authors":["Christopher P. Johnstone","Kate E. Galloway"],"categories":["reviews"],"content":"","date":1615766400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615823787,"objectID":"65edf9bf79714db881a9de0f39500a00","permalink":"https://www.meson.us/publication/engineering-cellular-symphonies/","publishdate":"2021-03-15T00:00:00Z","relpermalink":"/publication/engineering-cellular-symphonies/","section":"publication","summary":"Development unfolds through a series of orchestrated spatial and temporal gene-expression patterns. Despite relying on the noisy process of transcription, expression patterns remain robust to myriad disturbances. To achieve the goal of building complex tissues from the bottom up, synthetic biology must learn how to buffer and harness transcriptional noise.","tags":["synthetic biology","transcriptional noise","intrinsic noise","extrinsic noise","development","tissues"],"title":"Engineering cellular symphonies out of transcriptional noise","type":"publication"},{"authors":["Christopher P. Johnstone","Nathan B. Wang","Stuart A. Sevier","Kate E. Galloway"],"categories":["reviews"],"content":"","date":1605716082,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605719213,"objectID":"bfb65d4f5318bb8ec75b97070d04dc32","permalink":"https://www.meson.us/publication/understanding-engineering-chromatin-as-a-dynamical-system/","publishdate":"2020-11-18T11:14:42-05:00","relpermalink":"/publication/understanding-engineering-chromatin-as-a-dynamical-system/","section":"publication","summary":"Connecting the molecular structure and function of chromatin across length and timescales remains a grand challenge to understanding and engineering cellular behaviors. Across five orders of magnitude, dynamic processes constantly reshape chromatin structures, driving spaciotemporal patterns of gene expression and cell fate. Through the interplay of structure and function, the genome operates as a highly dynamic feedback control system. Recent experimental techniques have provided increasingly detailed data that revise and augment the relatively static, hierarchical view of genomic architecture with an understanding of how dynamic processes drive organization. Here, we review how novel technologies from sequencing, imaging, and synthetic biology refine our understanding of chromatin structure and function and enable chromatin engineering. Finally, we discuss opportunities to use these tools to enhance understanding of the dynamic interrelationship of chromatin structure and function.","tags":["chromatin","chromatin dynamics","super-resolution microscopy","Hi-C","contact domains","TAD","Micro-C","NGS","synthetic biology","nuclear architecture","supercoiling","cellular reprogramming"],"title":"Understanding and Engineering Chromatin as a Dynamical System across Length and Timescales","type":"publication"}]